#include <iostream>
#include <cmath>

using namespace std;

int binToInt(string bin, int size);
string cycleArray(string binArray, int size);
int findMax(string binArray, int size);
int numShifts(string binArray, int tar, int size, int cycles);

int main()
{
    int numTrials = 0;
    cin >> numTrials;

    for(int i = 0; i < numTrials; i++)
    {
        int binarySize = 0;
        int kTimes = 0;
        int target = 0;
        int shifts = 0;
        string binaryArray = "";
        cin >> binarySize >> kTimes;
        cin >> binaryArray;
        target = findMax(binaryArray, binarySize);
        shifts = numShifts(binaryArray, target, binarySize, kTimes);
        cout << shifts << "\n";
    }
}

int binToInt(string bin, int size)
{
    int total = 0;

    for(int i = 0; i < size; i++)
    {
        if(bin[i] == '1')
            total += pow(2, ((size - 1) - i));
    }
    return total;
}

string cycleArray(string binArray, int size)
{
    string copyArray = binArray;
    char tmpArray[size] = {};

    tmpArray[size - 1] = binArray[0];
    for(int j = 0; j < size - 1; j++)
    {
        tmpArray[j] = binArray[j + 1];
    }
    return tmpArray;
}

int findMax(string binArray, int size)
{
    int max = binToInt(binArray, size);
    string copyArray = binArray;
    
    for(int i = 0; i < size; i++)
    {
        string tmpArray = cycleArray(copyArray, size);
        int temp = binToInt(tmpArray, size);
        copyArray = tmpArray;
        if(temp > max)
            max = temp;
        
    }
    return max;
}

int numShifts(string binArray, int tar, int size, int cycles)
{
    int count = 0;
    int cycleCount = 0;
    string copyArray = binArray;

    for(int i = 0; i < size; i++)
    {
        while(cycleCount != cycles)
        {
        string tmpArray = cycleArray(copyArray, size);
        int temp = binToInt(tmpArray, size);

        if(temp == tar)
            cycleCount++;

        copyArray = tmpArray;
        count++;
        }
        return count;
    }
}
